# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_MaSuRCA(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_masurca_assembler(self, params, context=None):
        """
        Definition of run_masurca_assembler
        :param params: instance of type "masurcaAssemblerParams" (Arguments
           for run_masurca_assembler *******for creating the sr_config.txt
           file******* 1. DATA consisting of 5 fields: 1)two_letter_prefix
           2)mean 3)stdev 4)fastq(.gz)_fwd_reads 5)fastq(.gz)_rev_reads.
           e.g., PE= pe 180 20  /FULL_PATH/frag_1.fastq 
           /FULL_PATH/frag_2.fastq JUMP= sh 3600 200 
           /FULL_PATH/short_1.fastq  /FULL_PATH/short_2.fastq #pacbio OR
           nanopore reads must be in a single fasta or fastq file with
           absolute path, can be gzipped #if you have both types of reads
           supply them both as NANOPORE type PACBIO=/FULL_PATH/pacbio.fa
           NANOPORE=/FULL_PATH/nanopore.fa OTHER=/FULL_PATH/file.frg 2.
           PARAMETERS string graph_kmer_size - the k-mer size for deBruijn
           graph values between 25 and 127 are supported, 'auto' will compute
           the optimal size based on the read data and GC content bool
           use_linking_mates - set this to 1 for all Illumina-only
           assemblies; set this to 1 if you have less than 20x long reads
           (454, Sanger, Pacbio) and less than 50x CLONE coverage by
           Illumina, Sanger or 454 mate pairs; otherwise keep at 0 string
           dna_source - indicate 'bacteria' or 'other organisms' for setting
           limit_jump_coverage and cgwErrorRate values int
           limit_jump_coverage - this parameter is useful if you have too
           many Illumina jumping library mates. Typically set it to 60 for
           bacteria and 300 for the other organisms CA_PARAMETERS: these are
           the additional parameters to Celera Assembler.  do not worry about
           performance, number or processors or batch sizes -- these are
           computed automatically. float cgwErrorRate=0.15 - set
           cgwErrorRate=0.25 for bacteria and 0.1<=cgwErrorRate<=0.15 for
           other organisms. int kmer_count_threshold - minimum count k-mers
           used in error correction 1 means all k-mers are used.  one can
           increase to 2 if Illumina coverage >100 bool close_gaps - whether
           to attempt to close gaps in scaffolds with Illumina data (1) or
           not (0) int num_threads - auto-detected number of cpus to use,
           mandatory int jf_size  - this is mandatory jellyfish hash size --
           a safe value is estimated_genome_size*estimated_coverage (e.g.,
           2000000000) bool SOAP_ASSEMBLY - set this to 1 to use SOAPdenovo
           contigging/scaffolding module.  Assembly will be worse but will
           run faster. Useful for very large (>5Gbp) genomes bool
           do_homopolymer_trim - specifies if we do (1) or do not (0) want to
           trim long runs of homopolymers string workspace_name - the name of
           the workspace from which to take input and store output. string
           output_contigset_name - the name of the output contigset
           list<paired_readsParams> read_libraries - Illumina
           PairedEndLibrary files to assemble @optional jump_libraries
           @optional pacbio_reads @optional other_frg_file @optional
           graph_kmer_size @optional use_linking_mates @optional dna_source
           @optional kmer_count_threshold @optional close_gaps @optional
           soap_assembly @optional do_homopolymer_trim) -> structure:
           parameter "workspace_name" of String, parameter "num_threads" of
           Long, parameter "jf_size" of Long, parameter "reads_libraries" of
           list of type "paired_readsParams" (parameter groups) -> structure:
           parameter "pe_id" of type "obj_ref" (An X/Y/Z style KBase object
           reference), parameter "pe_prefix" of String, parameter "pe_mean"
           of Long, parameter "pe_stdev" of Long, parameter "jump_libraries"
           of list of type "jump_readsParams" -> structure: parameter "jp_id"
           of type "obj_ref" (An X/Y/Z style KBase object reference),
           parameter "jp_prefix" of String, parameter "jp_mean" of Long,
           parameter "jp_stdev" of Long, parameter "pacbio_reads" of type
           "obj_ref" (An X/Y/Z style KBase object reference), parameter
           "nanopore_reads" of type "obj_ref" (An X/Y/Z style KBase object
           reference), parameter "other_frg_file" of String, parameter
           "graph_kmer_size" of String, parameter "use_linking_mates" of type
           "bool" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "dna_source" of String, parameter "kmer_count_threshold"
           of Long, parameter "close_gaps" of type "bool" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter "soap_assembly" of
           type "bool" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "do_homopolymer_trim" of type "bool" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter
           "output_contigset_name" of String, parameter "create_report" of
           type "bool" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "masurcaResults" (Output parameter items
           for run_masurca_assembler report_name - the name of the
           KBaseReport.Report workspace object. report_ref - the workspace
           reference of the report.) -> structure: parameter "report_name" of
           String, parameter "report_ref" of String
        """
        return self._client.call_method('kb_MaSuRCA.run_masurca_assembler',
                                        [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_MaSuRCA.status',
                                        [], self._service_ver, context)
