# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_MaSuRCA(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_masurca(self, params, context=None):
        """
        Definition of run_masurca
        :param params: instance of type "masurcaParams" (Arguments for
           run_masurca string workspace_name - the name of the workspace from
           which to take input and store output. int hash_length - an odd
           integer (if even, it will be decremented) <= 31 string
           output_contigset_name - the name of the output contigset
           list<paired_end_lib> read_libraries - Illumina PairedEndLibrary
           files to assemble min_contig_length - integer to filter out
           contigs with length < min_contig_length from the MaSuRCA output.
           Default value is 500 (where 0 implies no filter). @optional
           min_contig_length @optional cov_cutoff @optional ins_length
           @optional read_trkg @optional amos_file @optional exp_cov
           @optional long_cov_cutoff) -> structure: parameter
           "workspace_name" of String, parameter "hash_length" of Long,
           parameter "read_libraries" of list of type "read_lib" (The
           workspace object name of a SingleEndLibrary or PairedEndLibrary
           file, whether of the KBaseAssembly or KBaseFile type.), parameter
           "output_contigset_name" of String, parameter "min_contig_length"
           of Long, parameter "cov_cutoff" of Double, parameter "ins_length"
           of Long, parameter "read_trkg" of type "bool" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter "amos_file" of type
           "bool" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "exp_cov" of Double, parameter "long_cov_cutoff" of
           Double
        :returns: instance of type "masurcaResults" (Output parameter items
           for run_masurca report_name - the name of the KBaseReport.Report
           workspace object. report_ref - the workspace reference of the
           report.) -> structure: parameter "report_name" of String,
           parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_MaSuRCA.run_masurca',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_MaSuRCA.status',
                                        [], self._service_ver, context)
